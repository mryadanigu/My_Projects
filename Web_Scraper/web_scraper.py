import base64

script = """
aW1wb3J0IG9zCmltcG9ydCBsb2dnaW5nCmltcG9ydCB0cmFjZWJhY2sKaW1wb3J0IHJlYWRsaW5lCmltcG9ydCByZXF1ZXN0cwpmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cApmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgdXJsam9pbiwgdW5xdW90ZQpmcm9tIHRxZG0gaW1wb3J0IHRxZG0KZnJvbSBjb2xvcmFtYSBpbXBvcnQgaW5pdCwgRm9yZQoKIyBJbml0aWFsaXplIENvbG9yYW1hCmluaXQoYXV0b3Jlc2V0PVRydWUpCgojIEFsaWFzaW5nIGZvciBjb2xvciAgIApHUk4gPSBGb3JlLkdSRUVOCkJMVSA9IEZvcmUuQkxVRQpZTFcgPSBGb3JlLllFTExPVwpSRUQgPSBGb3JlLlJFRApSU1QgPSBGb3JlLlJFU0VUCgojIFNldCB1cCBsb2dnaW5nCmxvZ2dpbmcuYmFzaWNDb25maWcoZmlsZW5hbWU9J3NjcmFwZXIubG9nJywgbGV2ZWw9bG9nZ2luZy5JTkZPKQoKIyBGdW5jdGlvbiB0byBjYWxjdWxhdGUgQU5TSSBjb2xvciBjb2RlIGJhc2VkIG9uIHByb2dyZXNzIHBlcmNlbnRhZ2UKZGVmIGNhbGN1bGF0ZV9jb2xvcihwcm9ncmVzcyk6CiAgICBpZiBwcm9ncmVzcyA8IDAuNToKICAgICAgICAjIFJlZCB0byB5ZWxsb3cgdHJhbnNpdGlvbgogICAgICAgIHIgPSAyNTUKICAgICAgICBnID0gaW50KDI1NSAqIHByb2dyZXNzICogMikKICAgIGVsc2U6CiAgICAgICAgIyBZZWxsb3cgdG8gZ3JlZW4gdHJhbnNpdGlvbgogICAgICAgIHIgPSBpbnQoMjU1IC0gMjU1ICogKHByb2dyZXNzIC0gMC41KSAqIDIpCiAgICAgICAgZyA9IDI1NQogICAgcmV0dXJuIGYiXDAzM1szODsyO3tyfTt7Z307MG0iCgojIERvd25sb2FkIEZ1bmN0aW9ucwpkZWYgZG93bmxvYWRfZmlsZXModXJsLCBzYXZlX2ZvbGRlciwgZXh0ZW5zaW9ucyk6CiAgICAjIENyZWF0ZSB0aGUgc2F2ZSBmb2xkZXIgaWYgaXQgZG9lc24ndCBleGlzdAogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKHNhdmVfZm9sZGVyKToKICAgICAgICBvcy5tYWtlZGlycyhzYXZlX2ZvbGRlcikKCiAgICAjIFNlbmQgYSBHRVQgcmVxdWVzdCB0byB0aGUgVVJMCiAgICB0cnk6CiAgICAgICAgbG9nZ2luZy5pbmZvKGYiRG93bmxvYWRpbmcgZmlsZXMgZnJvbSB7dXJsfSIpCiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCB0aW1lb3V0PTEwLCBoZWFkZXJzPXsnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCd9KQogICAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKSAgIyBSYWlzZSBhbiBleGNlcHRpb24gZm9yIEhUVFAgZXJyb3JzCiAgICBleGNlcHQgcmVxdWVzdHMuUmVxdWVzdEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dpbmcuZXJyb3IoZiJFcnJvciBhY2Nlc3Npbmcge3VybH06IHtlfSIpCiAgICAgICAgcHJpbnQoUkVEICsgZiJcbkVycm9yIGFjY2Vzc2luZyB7dXJsfToge2V9IikKICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAjIFBhcnNlIHRoZSBIVE1MIGNvbnRlbnQKICAgIHNvdXAgPSBCZWF1dGlmdWxTb3VwKHJlc3BvbnNlLnRleHQsICdodG1sLnBhcnNlcicpCiAgICAjIEZpbmQgYWxsIGxpbmtzIG9uIHRoZSB3ZWJwYWdlCiAgICBsaW5rcyA9IHNvdXAuZmluZF9hbGwoJ2EnKQoKICAgICMgRmlsdGVyIGxpbmtzIGJhc2VkIG9uIHNwZWNpZmllZCBleHRlbnNpb25zCiAgICBmaWxlX2xpbmtzID0gW2xpbmsuZ2V0KCdocmVmJykgZm9yIGxpbmsgaW4gbGlua3MgaWYgbGluay5nZXQoJ2hyZWYnKSBhbmQgYW55KGxpbmsuZ2V0KCdocmVmJykuZW5kc3dpdGgoZXh0KSBmb3IgZXh0IGluIGV4dGVuc2lvbnMpXQoKICAgICMgRGlzcGxheSB0b3RhbCBudW1iZXIgb2YgZmlsZXMgdG8gYmUgZG93bmxvYWRlZAogICAgcHJpbnQoR1JOICsgZiJcblsqXSBUb3RhbCBmaWxlcyB0byBiZSBkb3dubG9hZGVkOiB7bGVuKGZpbGVfbGlua3MpfSIgKyBSU1QpCiAgICBwcmludChHUk4gKyAiKiIgKiAzOCArICJcbiIgKyBSU1QpCgogICAgIyBEb3dubG9hZCBmaWxlcwogICAgdHJ5OgogICAgICAgIGZvciBpZHgsIGZpbGVfbGluayBpbiBlbnVtZXJhdGUoZmlsZV9saW5rcywgc3RhcnQ9MSk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgR2V0IHRoZSBmaWxlbmFtZSBhbmQgZGVjb2RlIGl0CiAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IHVucXVvdGUoZmlsZV9saW5rLnNwbGl0KCcvJylbLTFdKQogICAgICAgICAgICAgICAgIyBGaXggVVJMIGlmIG5lY2Vzc2FyeQogICAgICAgICAgICAgICAgaWYgbm90IGZpbGVfbGluay5zdGFydHN3aXRoKCdodHRwJyk6CiAgICAgICAgICAgICAgICAgICAgZmlsZV9saW5rID0gdXJsam9pbih1cmwsIGZpbGVfbGluaykKICAgICAgICAgICAgICAgICMgQ2hlY2sgaWYgdGhlIFVSTCBpcyB2YWxpZAogICAgICAgICAgICAgICAgaWYgcmVxdWVzdHMuaGVhZChmaWxlX2xpbmspLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgICAgICAgICAjIERvd25sb2FkIHRoZSBmaWxlCiAgICAgICAgICAgICAgICAgICAgd2l0aCByZXF1ZXN0cy5nZXQoZmlsZV9saW5rLCBzdHJlYW09VHJ1ZSwgdGltZW91dD0xMCwgaGVhZGVycz17J1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAnfSkgYXMgZmlsZV9yZXNwb25zZToKICAgICAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBpZiB0aGUgcmVxdWVzdCB3YXMgc3VjY2Vzc2Z1bAogICAgICAgICAgICAgICAgICAgICAgICBpZiBmaWxlX3Jlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgR2V0IHRvdGFsIGZpbGUgc2l6ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxfc2l6ZSA9IGludChmaWxlX3Jlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LWxlbmd0aCcsIDApKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBJbml0aWFsaXplIHByb2dyZXNzIGJhcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCB0cWRtKHRvdGFsPXRvdGFsX3NpemUsIHVuaXQ9J0InLCB1bml0X3NjYWxlPVRydWUsIHVuaXRfZGl2aXNvcj0xMDI0LCBkZXNjPWYiW3tpZHh9XS4ge2ZpbGVuYW1lfSIsIGR5bmFtaWNfbmNvbHM9VHJ1ZSkgYXMgcGJhcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKHNhdmVfZm9sZGVyLCBmaWxlbmFtZSksICd3YicpIGFzIGY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRG93bmxvYWQgYW5kIHdyaXRlIHRoZSBjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBjaHVuayBpbiBmaWxlX3Jlc3BvbnNlLml0ZXJfY29udGVudChjaHVua19zaXplPTEwMjQpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2h1bms6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi53cml0ZShjaHVuaykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFVwZGF0ZSBwcm9ncmVzcyBiYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcyA9IGYudGVsbCgpIC8gdG90YWxfc2l6ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gY2FsY3VsYXRlX2NvbG9yKHByb2dyZXNzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBiYXIuc2V0X2Rlc2NyaXB0aW9uKGNvbG9yICsgZiJbe2lkeH1dLiB7ZmlsZW5hbWV9IiArIFJTVCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYmFyLnVwZGF0ZShsZW4oY2h1bmspKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoKSAgIyBBZGQgYSBuZXcgbGluZSBhZnRlciBkb3dubG9hZCBjb21wbGV0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnaW5nLmVycm9yKGYiRmFpbGVkIHRvIGRvd25sb2FkIHtmaWxlX2xpbmt9LiBTdGF0dXMgY29kZToge2ZpbGVfcmVzcG9uc2Uuc3RhdHVzX2NvZGV9IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KFJFRCArIGYiXG5GYWlsZWQgdG8gZG93bmxvYWQge2ZpbGVfbGlua30uIFN0YXR1cyBjb2RlOiB7ZmlsZV9yZXNwb25zZS5zdGF0dXNfY29kZX0iKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBsb2dnaW5nLmVycm9yKGYiSW52YWxpZCBVUkw6IHtmaWxlX2xpbmt9IikKICAgICAgICAgICAgICAgICAgICBwcmludChSRUQgKyBmIlxuSW52YWxpZCBVUkw6IHtmaWxlX2xpbmt9IikKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgbG9nZ2luZy5lcnJvcihmIkVycm9yIGRvd25sb2FkaW5nIHtmaWxlX2xpbmt9OiB7ZX0iKQogICAgICAgICAgICAgICAgcHJpbnQoUkVEICsgZiJcbkVycm9yIGRvd25sb2FkaW5nIHtmaWxlX2xpbmt9OiB7ZX0iKQogICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgIGxvZ2dpbmcud2FybmluZygiRG93bmxvYWQgaW50ZXJydXB0ZWQgYnkgdXNlci4iKQogICAgICAgIHByaW50KFlMVyArICJcbkRvd25sb2FkIGludGVycnVwdGVkLiBDbGVhbmluZyB1cC4uLiIpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgbG9nZ2luZy5lcnJvcihmIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQ6IHtlfVxue3RyYWNlYmFjay5mb3JtYXRfZXhjKCl9IikKICAgICAgICBwcmludChSRUQgKyBmIlxuQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZDoge2V9IikKCiAgICAjIERpc3BsYXkgc3VjY2VzcyBtZXNzYWdlCiAgICBsb2dnaW5nLmluZm8oIkFsbCBmaWxlcyBkb3dubG9hZGVkIHN1Y2Nlc3NmdWxseSEiKQogICAgcHJpbnQoR1JOICsgIlxuQWxsIGZpbGVzIGRvd25sb2FkZWQgc3VjY2Vzc2Z1bGx5ISIpCiAgICByZXR1cm4gVHJ1ZQoKIyBCYW5uZXIKYmFubmVyID0gWUxXICsgIiIiCiAgICAg4pWtICAqICAqICAqICAqICAqICAqICAqICAqICDila4KICAgICAgIEF1dGhvcjogWWFkYSh0Lm1lL1lfdG1nKSAgCiAgICAg4pWwICAqICAqICAqICAqICAqICAqICAqICAqICDila8iIiIgKyBSU1QKCiMgUHJpbnQgdGhlIGJhbm5lcgpwcmludChiYW5uZXIpCgojIEZ1bmN0aW9uIHRvIGdldCB1c2VyIGlucHV0IFVSTApkZWYgZ2V0X3VybF9pbnB1dCgpOgogICAgdHJ5OgogICAgICAgIHVybCA9IGlucHV0KEdSTiArICIiIgrila3ilIDilIB8IFR5cGUgQW55IFVSTCBZb3UgV2FudCBUbyBTY3JhcCB8CiEgIGAgYGBgYCBgYGAgYGBgIGBgYCBgYGBgIGBgIGBgYGBgIGAK4pWw4pSA4pSAJCAiIiIgKyBSU1QpCiAgICAgICAgcmV0dXJuIHVybAogICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgIHByaW50KFJFRCArICJcblstXSBVc2VyIFJlcXVlc3QgRXhpdGluZy4uLiIgKyBSU1QpCiAgICAgICAgZXhpdCgpCgojIEZ1bmN0aW9uIHRvIGdldCB1c2VyIGlucHV0IGZpbGUgZXh0ZW5zaW9ucwpkZWYgZ2V0X2V4dGVuc2lvbnNfaW5wdXQoKToKICAgIHRyeToKICAgICAgICBleHRlbnNpb25zX2lucHV0ID0gaW5wdXQoR1JOICsgIiIiCuKVreKUgOKUgHwgVHlwZSBGaWxlIEV4dGVuc2lvbnMgW3BkZiwgdHh0LCBodG1sLi4uXQohICBgIGBgYGAgYGBgICBgYGBgYGBgYGBgIGBgYGBgIGBgYGAgYGBgYGBgYGAK4pWw4pSA4pSAJCAiIiIgKyBSU1QpLnN0cmlwKCkgICMgQWRkIC5zdHJpcCgpIHRvIHJlbW92ZSBsZWFkaW5nL3RyYWlsaW5nIHdoaXRlc3BhY2UKICAgICAgICBleHRlbnNpb25zID0gZXh0ZW5zaW9uc19pbnB1dC5zcGxpdCgpCiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbnMKICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgICAgICBwcmludChSRUQgKyAiXG5bLV0gVXNlciBSZXF1ZXN0IEV4aXRpbmcuLi4iICsgUlNUKQogICAgICAgIGV4aXQoKQoKZGVmIGNsZWFyX2NvbnNvbGUoKToKICAgIGlmIG9zLm5hbWUgPT0gJ3Bvc2l4JzoKICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIGVsc2U6CiAgICAgICAgb3Muc3lzdGVtKCdjbHMnKQoKIyBNYWluIEludGVyZmFjZQpkZWYgbWFpbl9pbnRlcmZhY2UoKToKICAgIHdoaWxlIFRydWU6CiAgICAgICAgY2xlYXJfY29uc29sZSgpCiAgICAgICAgcHJpbnQoYmFubmVyKQogICAgICAgIHByaW50KEdSTiArICIxLiBEb3dubG9hZCBGaWxlcyIgKyBSU1QpCiAgICAgICAgcHJpbnQoR1JOICsgIjIuIEV4aXQiICsgUlNUKQogICAgICAgIGNob2ljZSA9IGlucHV0KEdSTiArICJcbkVudGVyIHlvdXIgY2hvaWNlOiAiICsgUlNUKQogICAgICAgIGlmIGNob2ljZSA9PSAnMSc6CiAgICAgICAgICAgIHVybCA9IGdldF91cmxfaW5wdXQoKQogICAgICAgICAgICBleHRlbnNpb25zID0gZ2V0X2V4dGVuc2lvbnNfaW5wdXQoKQogICAgICAgICAgICBzYXZlX2ZvbGRlciA9IG9zLnBhdGguYmFzZW5hbWUodW5xdW90ZSh1cmwucnN0cmlwKCcvJykpKQogICAgICAgICAgICBzdWNjZXNzID0gZG93bmxvYWRfZmlsZXModXJsLCBzYXZlX2ZvbGRlciwgZXh0ZW5zaW9ucykKICAgICAgICAgICAgaWYgc3VjY2VzczoKICAgICAgICAgICAgICAgIGlucHV0KEJMVSArICJQcmVzcyBFbnRlciB0byByZXR1cm4gdG8gbWFpbiBpbnRlcmZhY2UuLi4iICsgUlNUKQogICAgICAgIGVsaWYgY2hvaWNlID09ICcyJzoKICAgICAgICAgICAgcHJpbnQoUkVEICsgIlxuRXhpdGluZy4uLiIgKyBSU1QpCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoUkVEICsgIlxuSW52YWxpZCBjaG9pY2UuIFBsZWFzZSBzZWxlY3QgYSB2YWxpZCBvcHRpb24uIiArIFJTVCkKICAgICAgICAgICAgaW5wdXQoQkxVICsgIlByZXNzIEVudGVyIHRvIGNvbnRpbnVlLi4uIiArIFJTVCkKICAgICAgICAgICAgCnRyeToKICAgIG1haW5faW50ZXJmYWNlKCkKZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgcHJpbnQoUkVEICsgIlxuXG5bLV0gVXNlciBSZXF1ZXN0IEV4aXRpbmcuLi4iICsgUlNUKQogICAgZXhpdCgp
"""

decoded_script = base64.b64decode(script).decode('utf-8')

exec(decoded_script)
