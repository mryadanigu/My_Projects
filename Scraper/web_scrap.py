import base64

script = """

"""

decoded_script = base64.b64decode(script).decode('utf-8')

exec(decoded_script)
